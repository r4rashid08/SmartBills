package com.affable.smartbills.invoice.pdf;

import android.content.Context;
import android.content.Intent;
import android.os.Environment;
import android.util.Log;
import android.widget.Toast;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BarcodeQRCode;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import es.dmoral.toasty.Toasty;

public class InvoicePdf implements Serializable {

    private final Context context;
    private String invoiceId, paymentMethod, orderTime, issueTime, currency;
    private Map<String, String> customerInfo;
    private Map<String, String> userInfo;
    private List<String[]> stringItemList;
    private double subTotal, tax, discount, totalMoney, dueMoney;

    private BaseColor colorBlue;
    private Document document;
    private File pdfFile;
    private DecimalFormat f;
    Font titleFont;
    Font valueFont;

    public InvoicePdf(Context context, String invoiceId, String paymentMethod, String orderTime, String issueTime, String currency, Map<String, String> customerInfo, Map<String, String> userInfo, List<String[]> stringItemList, double subTotal, double tax, double discount, double totalMoney, double dueMoney) {

        this.context = context;
        this.invoiceId = invoiceId;
        this.paymentMethod = paymentMethod;
        this.orderTime = orderTime;
        this.issueTime = issueTime;
        this.currency = currency;
        this.customerInfo = customerInfo;
        this.userInfo = userInfo;
        this.stringItemList = stringItemList;
        this.subTotal = subTotal;
        this.tax = tax;
        this.discount = discount;
        this.totalMoney = totalMoney;
        this.dueMoney = dueMoney;


    }



    public boolean createPdf() throws FileNotFoundException, DocumentException {

        //init some values
        f = (DecimalFormat) NumberFormat.getInstance(Locale.ENGLISH);
        f.applyPattern("#0.00");

        colorBlue = new BaseColor(13, 127, 214);

        titleFont = new Font(Font.FontFamily.HELVETICA, 16f, Font.BOLD, colorBlue);
        valueFont = new Font(Font.FontFamily.HELVETICA, 16f);

        File folder = new File(Environment.getExternalStorageDirectory().toString(), "SmartBills");
        if (!folder.exists())
            folder.mkdir();

        pdfFile = new File(folder, "smart_bills_invoice.pdf");

        document = new Document(PageSize.A4);
        OutputStream outputStream = new FileOutputStream(pdfFile);

        PdfWriter.getInstance(document, outputStream);
        document.open();


        //set Invoice Header
        Font invoiceFont = new Font(Font.FontFamily.HELVETICA, 24f, Font.BOLD, colorBlue);
        Paragraph invoiceText = new Paragraph("INVOICE", invoiceFont);
        invoiceText.setAlignment(Element.ALIGN_LEFT);
        document.add(invoiceText);

        document.add(new Paragraph("\n\n"));
        document.add(createTableOne());
        document.add(new Paragraph("\n"));
        document.add(createTableTwo());
        document.add(new Paragraph("\n\n"));
        document.add(createTableThree());
        document.add(new Paragraph("\n"));
        document.add(createTableFour());

        document.add(new Paragraph("\n\n\n"));
        Paragraph signText = new Paragraph("________________________\n  (Authorized Signatory)\n\n");
        signText.setAlignment(Element.ALIGN_LEFT);
        document.add(signText);

        Font footerFont = new Font(Font.FontFamily.HELVETICA, 12f, Font.ITALIC, BaseColor.GRAY);
        Paragraph footerText = new Paragraph("Invoice Generated by \"Smart Bills\" ", footerFont);
        footerText.setAlignment(Element.ALIGN_RIGHT);
        document.add(footerText);

        document.close();
        Toasty.success(context, "Invoice Generated", Toast.LENGTH_SHORT).show();


        return true;

    }

    private PdfPTable createTableOne() {

        float[] colOneWidth = {245f, 245f, 105f};
        PdfPTable table = new PdfPTable(colOneWidth);
        table.setWidthPercentage(100);

        //row 01
        table.addCell(new PdfPCell(new Phrase("Invoice ID", titleFont))).setBorder(Rectangle.NO_BORDER);
        table.addCell(new PdfPCell(new Phrase("Date of Issue", titleFont))).setBorder(Rectangle.NO_BORDER);

        //add qr code
        PdfPCell qrCell = new PdfPCell(getQRCode());
        qrCell.setBorder(Rectangle.NO_BORDER);
        qrCell.setRowspan(4);
        qrCell.setHorizontalAlignment(Rectangle.RIGHT);
        table.addCell(qrCell);

        //row 02
        table.addCell(new PdfPCell(new Phrase(invoiceId, valueFont))).setBorder(Rectangle.NO_BORDER);
        table.addCell(new PdfPCell(new Phrase(issueTime, valueFont))).setBorder(Rectangle.NO_BORDER);

        //row 03
        table.addCell(new PdfPCell(new Phrase("Payment Method", titleFont))).setBorder(Rectangle.NO_BORDER);
        table.addCell(new PdfPCell(new Phrase("Order Time", titleFont))).setBorder(Rectangle.NO_BORDER);

        //row 04
        table.addCell(new PdfPCell(new Phrase(paymentMethod, valueFont))).setBorder(Rectangle.NO_BORDER);
        table.addCell(new PdfPCell(new Phrase(orderTime, valueFont))).setBorder(Rectangle.NO_BORDER);

        return table;

    }

    private PdfPTable createTableTwo() {

        String clientName = customerInfo.get("client_name");
        String clientEmail = customerInfo.get("client_email");
        String clientPhone = customerInfo.get("client_phone");
        String clientAddress = customerInfo.get("client_address");

        String userName = userInfo.get("user_name");
        String userEmail = userInfo.get("user_email");
        String userPhone = userInfo.get("user_phone");
        String userAddress = userInfo.get("user_address");

        float[] colWidth = {245f, 350f};
        PdfPTable table = new PdfPTable(colWidth);
        table.setWidthPercentage(100);

        Font detailsValueFont = new Font(Font.FontFamily.HELVETICA, 14f);

        //row 01
        table.addCell(new PdfPCell(new Phrase("BILLED BY", titleFont))).setBorder(Rectangle.NO_BORDER);
        table.addCell(new PdfPCell(new Phrase("BILLED TO", titleFont))).setBorder(Rectangle.NO_BORDER);

        //row 02
        table.addCell(new PdfPCell(new Phrase(userName, detailsValueFont))).setBorder(Rectangle.NO_BORDER);
        table.addCell(new PdfPCell(new Phrase(clientName, detailsValueFont))).setBorder(Rectangle.NO_BORDER);

        //row 03
        table.addCell(new PdfPCell(new Phrase(userEmail, detailsValueFont))).setBorder(Rectangle.NO_BORDER);
        table.addCell(new PdfPCell(new Phrase(clientEmail, detailsValueFont))).setBorder(Rectangle.NO_BORDER);

        //row 04
        table.addCell(new PdfPCell(new Phrase(userPhone, detailsValueFont))).setBorder(Rectangle.NO_BORDER);
        table.addCell(new PdfPCell(new Phrase(clientPhone, detailsValueFont))).setBorder(Rectangle.NO_BORDER);

        //row 05
        table.addCell(new PdfPCell(new Phrase(userAddress, detailsValueFont))).setBorder(Rectangle.NO_BORDER);
        table.addCell(new PdfPCell(new Phrase(clientAddress, detailsValueFont))).setBorder(Rectangle.NO_BORDER);

        return table;

    }

    private PdfPTable createTableThree() {

        float[] colWidth = {235f, 120f, 120f, 120f};
        PdfPTable table = new PdfPTable(colWidth);
        table.setWidthPercentage(100);

        Font tableTitleFont = new Font(Font.FontFamily.HELVETICA, 14f, Font.BOLD, BaseColor.DARK_GRAY);
        Font tableValueFont = new Font(Font.FontFamily.HELVETICA, 14f);

        //row 01
        PdfPCell c1 = new PdfPCell(new Phrase("ITEM NAME", tableTitleFont));
        c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
        c1.setPadding(8f);
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        PdfPCell c2 = new PdfPCell(new Phrase("UNIT COST", tableTitleFont));
        c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
        c2.setPadding(8f);
        c2.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c2);

        PdfPCell c3 = new PdfPCell(new Phrase("QUANTITY", tableTitleFont));
        c3.setBackgroundColor(BaseColor.LIGHT_GRAY);
        c3.setPadding(8f);
        c3.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c3);

        PdfPCell c4 = new PdfPCell(new Phrase("AMOUNT", tableTitleFont));
        c4.setBackgroundColor(BaseColor.LIGHT_GRAY);
        c4.setPadding(8f);
        c4.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c4);


        //for more items
        for (int i = 0; i < stringItemList.size(); i++) {

            String[] item = stringItemList.get(i);

            for (int j = 0; j < item.length; j++) {

                String value = item[j];

                PdfPCell cell = new PdfPCell(new Phrase(value, tableValueFont));

                //set item name in center & other as left align
                if (j == 0)
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                else {
                    cell.setPaddingRight(8f);
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                }

                cell.setPaddingBottom(6f);
                table.addCell(cell);

            }

        }

        return table;
    }

    private PdfPTable createTableFour() {

        float[] colWidth = {235f, 120f, 120f, 120f};
        PdfPTable table = new PdfPTable(colWidth);
        table.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.setSpacingAfter(24f);

        //row 01
        table.addCell(tableFourTitleCell("SUB-TOTAL "));
        table.addCell(tableFourValueCell(f.format(subTotal) + currency));

        Log.d("InvoicePDF", subTotal + "");

        //row 02
        table.addCell(tableFourTitleCell("DISCOUNT "));
        table.addCell(tableFourValueCell(f.format(discount) + currency));

        //row 03
        table.addCell(tableFourTitleCell("TAX RATE "));
        table.addCell(tableFourValueCell(userInfo.get("tax") + "%"));

        //row 04
        table.addCell(tableFourTitleCell("TAX "));
        table.addCell(tableFourValueCell(f.format(tax) + currency));

        //row 05
        table.addCell(tableFourTitleCell("TOTAL "));
        table.addCell(tableFourValueCell(f.format(totalMoney) + currency));

        //row 06
        table.addCell(tableFourTitleCell("DUE "));
        table.addCell(tableFourValueCell(f.format(dueMoney) + currency));

        return table;
    }

    private PdfPCell tableFourTitleCell(String title) {

        Font titleFont = new Font(Font.FontFamily.HELVETICA, 14f, Font.BOLD, BaseColor.DARK_GRAY);

        PdfPCell cell = new PdfPCell(new Phrase(title + ":", titleFont));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);

        return cell;
    }

    private PdfPCell tableFourValueCell(String value) {

        Font cellFont = new Font(Font.FontFamily.HELVETICA, 14f, Font.NORMAL, BaseColor.DARK_GRAY);

        PdfPCell cell = new PdfPCell(new Phrase(value, cellFont));
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell.setBorder(Rectangle.NO_BORDER);

        return cell;
    }

    private Image getQRCode() {

        String barCodeTxt = "InvoiceID: " + invoiceId + "\n" + "Order Time: " + orderTime + "\n" + "Total Money: " + totalMoney + "\n" + "Due Money: " + dueMoney;

        BarcodeQRCode barcodeQRCode = new BarcodeQRCode(barCodeTxt, 100, 100, null);
        Image codeQrImage = null;
        try {
            codeQrImage = barcodeQRCode.getImage();
            codeQrImage.scaleAbsolute(100, 100);
        } catch (BadElementException e) {
            e.printStackTrace();
        }

        return codeQrImage;

    }

    public void viewPDF() {
        Intent intent = new Intent(context, ViewPdfActivity.class);
        intent.putExtra("path", pdfFile.getAbsolutePath());
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        context.startActivity(intent);

    }


}
